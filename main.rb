# Ruby data types are dinamic, which means that it dosen't have to 
# declare the type of the variable before using.

# INTEGER TYPE
# number = 10
# > number.class == Integer

# FLOAT TYPE
# float_number = 10.99
# > float_number.class ==> Float

# STRING TYPE
# string_var = "hello world"
# > string_var.class ==> String

# BOLEAN TYPES
# true_boolean = true
# > true_boolean.class ==> TrueClass

# false_boolean = false
# > false_boolean.class ==> FalseClass

# ARRAYS
# dummy_array = ["pos_0", 'pos_1', 'pos_2']
# dummy_array.class ==> Array

# SYMBOL :
# The objects of the Symbol class represent the names present inside the Ruby interpreter.
# They are usually generated by using :name literal syntax or by using to_sym methods.
# The similar Symbol objects are created for a given name string for the duration of a programâ€™s execution,
# regardless of the content and meaning of the name.

# :ruby_symbol
# :ruby_symbol.class ==> Symbol
# :ruby_symbol.object_id ==> 2741148 (position of the symbol on programs memory)

# HASHES
# hashes are objects `key: values`
# ruby_hash = { course: "ruby", language: "pt-BR", author: "Leonam Rodrigo QuintÃ£o" }
# ruby_hash[:course] ==> "ruby"

# RUBY MATH OPERATORS
# These operators allow you to perform basic arithmetic operations in Ruby.

# Addition (+)
# This operator adds two numbers together.
# sum = 5 + 3  ==> sum is 8

# Subtraction (-)
# This operator subtracts the second number from the first number.
# difference = 5 - 3  ==> difference is 2

# Multiplication (*)
# This operator multiplies two numbers.
# product = 5 * 3  ==> product is 15

# Division (/)
# This operator divides the first number by the second number.
# quotient = 6 / 3  ==> quotient is 2

# Modulus (%)
# This operator returns the remainder of the division of the first number by the second number.
# remainder = 5 % 3  ==> remainder is 2 (the residue of the operation).

# Exponentiation (**)
# This operator raises the first number to the power of the second number.
# power = 2 ** 3  ==> power is 8 (2 * 2 * 2)

# Integer Division
# If both numbers are integers, division will return an integer result, discarding any fractional part.
# result = 5 / 2  ==> result is 2

# To get a precise result with fractions, at least one of the numbers should be a floating-point number
# (a number with a decimal point).
# result = 5.0 / 2  ==> result is 2.5


#### Control structure ####
# Control structure are divided into two categories "conditional" and "iteration".
# Conditional => if, else, elsif, unless and case;
# Itararion => for, times, while, do/while - loop 

def even_or_odd(number)
	if number % 2 == 0
		puts "#{number} is even"
	else
		puts "#{number} is odd"
	end
end

def ternary_even_or_odd(number)
  puts number % 2 == 0 ? "#{number} is even" : "#{number} is odd"
end

even_or_odd(4)  # Output: 4 is even
even_or_odd(7)  # Output: 7 is odd